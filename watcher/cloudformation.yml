AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SubscriptionTable:
    Type: String

  ProductTable:
    Type: String

  HyP3URL:
    Type: String

  EDLUsername:
    Type: String

  EDLPassword:
    Type: String

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action: dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionTable}*"
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductTable}*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SUBSCRIPTION_TABLE: !Ref SubscriptionTable
          PRODUCT_TABLE: !Ref ProductTable
          HYP3_URL: !Ref HyP3URL
          EDLUSERNAME: !Ref EDLUsername
          EDLPASSWORD: !Ref EDLPassword
      Code: src/
      Handler: find_new.lambda_handler
      MemorySize: 3008
      Role: !GetAtt Role.Arn
      Runtime: python3.8
      Timeout: 900

  EventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Lambda
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: lambda

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90